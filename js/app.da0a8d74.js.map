{"version":3,"file":"js/app.da0a8d74.js","mappings":"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","sources":["webpack://astro-dynamics/./src/App.vue","webpack://astro-dynamics/./src/components/AstroCanvas.vue","webpack://astro-dynamics/./src/components/VolumeShader.js","webpack://astro-dynamics/./src/components/AstroCanvas.vue?6daa","webpack://astro-dynamics/./src/App.vue?7ccd","webpack://astro-dynamics/./src/main.js","webpack://astro-dynamics/webpack/bootstrap","webpack://astro-dynamics/webpack/runtime/chunk loaded","webpack://astro-dynamics/webpack/runtime/compat get default export","webpack://astro-dynamics/webpack/runtime/define property getters","webpack://astro-dynamics/webpack/runtime/global","webpack://astro-dynamics/webpack/runtime/hasOwnProperty shorthand","webpack://astro-dynamics/webpack/runtime/jsonp chunk loading","webpack://astro-dynamics/webpack/startup"],"sourcesContent":["<template>\n  <AstroCanvas/>\n</template>\n\n<script>\nimport AstroCanvas from './components/AstroCanvas.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    AstroCanvas\n  }\n}\n</script>\n\n<style>\n* {\n  margin: 0;\n}\n</style>\n","<template>\r\n  <div class=\"AstroCanvas\">\r\n    <canvas id=\"canvas_1\" class=\"big_canvas\" @click=\"clickCanvas\" ></canvas>\r\n    <el-progress class=\"percentage-progress\" type=\"dashboard\" :style=\"'display:' + (isComplete? 'none' : 'block') \" :percentage=\"progress_percentage\" :status=\"progress_status\">\r\n      <template #default=\"{ percentage }\">\r\n        <span class=\"percentage-value\">{{ percentage }}%</span>\r\n        <span class=\"percentage-label\">loading data</span>\r\n      </template>\r\n    </el-progress>\r\n    <el-text class=\"percentage-frame\" :type=\"msg_type\" size=\"large\">{{canvas_status_msg}}</el-text>\r\n    <div class=\"slider\" :style=\"'display:' + (isComplete? 'block' : 'none')\">\r\n      <el-slider v-model=\"cur_frame\" :min=\"frame_start\" :max=\"frame_end\" \r\n       show-input show-tooltip @change=\"sliderChange\"/>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n/** tmp data source: http://ccdb.ucsd.edu/images/CCDB_1019\r\n * Python: \r\nimport imageio.v2 as iio\r\nimport nrrd\r\ndata = iio.volread('CCDB_1019_3D-coded.tiff').astype('float32');\r\ndata2 = data/data.max()*0.5;\r\nnrrd.write('CCDB_1019_3D-coded-2.nrrd', data2, compression_level=5);\r\n# creating nrrd part have moved to ageom_utils.py\r\n */\r\n/**\r\n# create .tiff file from MATLAB mat file:\r\nimport mat73\r\nimport numpy as np\r\nfrom skimage import io\r\n\r\ndata_dict = mat73.loadmat('layers_clean_img.mat')\r\nlayers_clean_img = data_dict['layers_clean_img']\r\n\r\nlayers_clean_img = np.transpose(layers_clean_img, (2, 1, 0))\r\n\r\nlayers_clean_img = layers_clean_img/layers_clean_img.max() * 255\r\n\r\nlayers_clean_img = layers_clean_img.astype(np.uint8)\r\n\r\nio.imsave(\"ASTRO_NAOMI.tiff\", layers_clean_img)\r\n * \r\n */\r\n\r\nimport * as THREE from 'three';\r\n// import * as BufferGeometryUtils from 'three/addons/utils/BufferGeometryUtils.js';\r\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\nimport { GUI } from 'three/addons/libs/lil-gui.module.min.js';\r\nimport { VolumeRenderShader1 } from './VolumeShader.js';\r\nimport { NRRDLoader } from 'three/addons/loaders/NRRDLoader.js';\r\n// import {cm_gray, cm_viridis} from '../textures/colormap.js';\r\nimport npyjs from \"npyjs\";\r\n\r\nimport {parse} from 'ini'\r\n\r\nconst scene = new THREE.Scene();\r\n\r\n\r\nlet renderer, camera, controls, material,texture,texture_static,loader, mesh, group;\r\nlet cmtextures,volconfig;\r\n// let lx,ly,lz;\r\n\r\nlet npy_loader = new npyjs();\r\n\r\n// let frame_start = 0;\r\n// let frame_end = 10;\r\n// let cur_frame = frame_start;\r\n\r\n// let rotateRange = [-15, 15];\r\n// let textureAct;\r\nlet static_data;\r\n// let rotate_direction = true;\r\nconst rotate_range = 0.1 * Math.PI;\r\nlet rotate_direction = true;\r\n\r\nlet fulfilledCount  = 0;\r\nlet errorCount = 0;\r\n\r\nlet that = null;\r\n\r\nlet dynamics_config;\r\n\r\nconst control_config = {\r\n  animate: true,\r\n  rotate: true,\r\n}\r\n\r\nlet caches;\r\n\r\n// let trueCnt = 0,falseCnt = 0;\r\n\r\nexport default {\r\n  name: 'AstroCanvas',\r\n  data(){\r\n    return {\r\n      progress_percentage: 0,\r\n      isComplete: false,\r\n      canvas_status_msg: \"loading..\",\r\n      frame_start:0,\r\n      frame_end:10,\r\n      cur_frame:0,\r\n      progress_status:\"\",\r\n      msg_type:\"success\",\r\n    }\r\n  },\r\n  mounted(){\r\n    that = this;\r\n    this.init();\r\n    this.readIni();\r\n    // this.drawAxis();\r\n    // this.drawCenterCube();\r\n  },\r\n  methods: {\r\n    init(){\r\n      // Create camera (The volume renderer does not work very well with perspective yet)\r\n      // camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );\r\n\t\t\tconst h = 1000; // frustum height\r\n\t\t\tconst aspect = window.innerWidth / window.innerHeight;\r\n\t\t\tcamera = new THREE.OrthographicCamera( - h * aspect / 2, h * aspect / 2, h / 2, - h / 2, 1, 2000 );\r\n\t\t\tcamera.position.set( 300, 0, 0);\r\n\t\t\t// camera.up.set( 0, 1, 0 ); // In our data, z is up\r\n\r\n\r\n      const canvas = document.querySelector('#canvas_1');\r\n      renderer = new THREE.WebGLRenderer({canvas});\r\n      renderer.setPixelRatio(1);\r\n      renderer.setSize( window.innerWidth, window.innerHeight, false );\r\n\r\n      controls = new OrbitControls( camera, renderer.domElement );\r\n      // controls.addEventListener( 'change', this.controlChange );\r\n\t\t\t// controls.target.set(30, 260, 260 );\r\n\t\t\tcontrols.minZoom = 0.5;\r\n\t\t\tcontrols.maxZoom = 100;\r\n      camera.zoom = 4;\r\n      camera.updateProjectionMatrix();\r\n      // controls.object.zoom = 4;\r\n      // controls.object.object.zoom = 3;\r\n\t\t\tcontrols.enablePan = false;\r\n\t\t\tcontrols.update();\r\n      group = new THREE.Group();\r\n\r\n      window.addEventListener('resize', this.onWindowResize );\r\n\r\n    },\r\n    sliderChange() {\r\n      // console.log(\"sliderInput:\",this.cur_frame)\r\n      // this.innerRotate();\r\n      this.innerAnimate();\r\n    },\r\n    async readIni() {\r\n     await fetch('dynamics.ini').then(response => response.text()).then(text=>{\r\n        let all_config = parse(text)\r\n        dynamics_config = all_config[all_config.active]\r\n        that.frame_start = parseInt(dynamics_config.frame_start)\r\n        that.frame_end = parseInt(dynamics_config.frame_end)\r\n        that.cur_frame = that.frame_start\r\n        caches = new Array(that.frame_end-that.frame_start+1)\r\n        control_config.animate = dynamics_config.animate\r\n        control_config.rotate = dynamics_config.rotate\r\n      })\r\n      \r\n      this.preloadData();\r\n    },\r\n\r\n    drawAxis(){\r\n      const axesHelper = new THREE.AxesHelper(200);\r\n      scene.add( axesHelper );\r\n    },\r\n    innerRotate() {\r\n      if(control_config.rotate) {\r\n          if(rotate_direction) {\r\n            group.rotation.y += 0.005;\r\n            // trueCnt += 1;\r\n            if(group.rotation.y > rotate_range) {\r\n              rotate_direction = false;\r\n              // console.log(\"T trueCnt:\", trueCnt, \", falseCnt:\", falseCnt);\r\n            }\r\n          } else {\r\n            group.rotation.y -= 0.005;\r\n            // falseCnt += 1;\r\n            if(group.rotation.y < -rotate_range) {\r\n              rotate_direction = true;\r\n              // console.log(\"F trueCnt:\", trueCnt, \", falseCnt:\", falseCnt);\r\n            }\r\n          }\r\n      }\r\n    },\r\n    render() {\r\n      renderer.render(scene, camera);\r\n      requestAnimationFrame(this.render);\r\n    },\r\n    onWindowResize() {\r\n\r\n      renderer.setSize( window.innerWidth, window.innerHeight );\r\n\r\n      const aspect = window.innerWidth / window.innerHeight;\r\n\r\n      const frustumHeight = camera.top - camera.bottom;\r\n\r\n      camera.left = - frustumHeight * aspect / 2;\r\n      camera.right = frustumHeight * aspect / 2;\r\n\r\n      camera.updateProjectionMatrix();\r\n\r\n      // this.render();\r\n\r\n    },\r\n    drawCenterCube() {\r\n      let geometry = new THREE.BoxGeometry( 10, 10, 10 );\r\n      let material = new THREE.MeshBasicMaterial( { color: 0x00ff00 , side: THREE.DoubleSide} );\r\n      let cube = new THREE.Mesh( geometry, material );\r\n\r\n      group.add(cube)\r\n      cube.position.set(30, 260, 260 )\r\n      scene.add( group );\r\n    },\r\n    loadData(){\r\n      // Colormap textures\r\n      cmtextures = {\r\n        viridis: new THREE.TextureLoader().load( 'colormap/cm_viridis.png',function (){renderer.render(scene, camera);}),\r\n        gray: new THREE.TextureLoader().load( 'colormap/cm_gray.png', function (){renderer.render(scene, camera);}),\r\n        green: new THREE.TextureLoader().load( 'colormap/cm_green.png', function (){renderer.render(scene, camera);}),\r\n        mix: new THREE.TextureLoader().load( 'colormap/cm_mix.png', function (){renderer.render(scene, camera);}),\r\n      };\r\n\r\n      // console.log(cmtextures)\r\n\r\n      volconfig = { clim1: 0, clim2: 1, renderstyle: 'mip', isothreshold: 0.0, colormap: 'mix' ,frame: 10};\r\n      loader = new NRRDLoader();\r\n\r\n      //loader.load( 'dynamics/NAOMI_3D-coded-2.nrrd', this.loadVolume);\r\n      loader.load( 'dynamics/' + dynamics_config.nrrd_file, this.loadVolume);\r\n      // loader.load( 'stent_origin.nrrd', this.loadVolume);\r\n\r\n\r\n\r\n\r\n      const gui = new GUI();\r\n      gui.add(control_config, 'animate').onChange(this.updateAnimate)\r\n      gui.add(control_config, 'rotate').onChange(this.updateRotate)\r\n      gui.add( volconfig, 'clim1', 0, 0.5, 0.01 ).onChange( this.updateUniforms );\r\n        // gui.add( volconfig, 'clim2', 0, 1, 0.01 ).onChange( this.updateUniforms );\r\n        // gui.add( volconfig, 'colormap', { gray: 'gray', viridis: 'viridis' } ).onChange( this.updateUniforms );\r\n        // gui.add( volconfig, 'renderstyle', { mip: 'mip', iso: 'iso' } ).onChange( this.updateUniforms );\r\n        // gui.add( volconfig, 'isothreshold', 0, 1, 0.01 ).onChange( this.updateUniforms );\r\n        // gui.add( volconfig, 'frame', 0, 199, 1 ).onChange( this.onFrameChanged );\r\n    },\r\n    updateAnimate(ani) {\r\n      control_config.animate = ani;\r\n    },\r\n    updateRotate(rot) {\r\n      control_config.rotate = rot;\r\n    },\r\n    async preloadData() {\r\n      let urls = [];\r\n      for(let k = this.frame_start; k<= this.frame_end; k++) {\r\n        //let filename = 'dynamics/naomi_0.02/NAOMI_3D_frame_' + String(k).padStart(5, '0') + '.npy';\r\n        let filename = 'dynamics/' + dynamics_config.frame_prefix + String(k).padStart(5, '0') + '.npy';\r\n        urls.push(filename)\r\n      }\r\n      // https://blog.csdn.net/study_way/article/details/134392933\r\n      // batch process\r\n      const origin_urls = [...urls]\r\n      async function concurrencyRequest(urls, maxNum) {\r\n        return new Promise((resolve) => {\r\n          // const results = [];\r\n          const executing = [];\r\n          const run = async (url) => {\r\n            try {\r\n              const cache_idx = origin_urls.indexOf(url)\r\n              await fetch(url).then(response=>{\r\n                if(response.ok) {\r\n                  fulfilledCount ++;\r\n                  return response.arrayBuffer()\r\n\r\n                } else {\r\n                  errorCount ++;\r\n                  that.progress_status = \"exception\"\r\n                  that.msg_type = \"danger\"\r\n                  that.canvas_status_msg = \"URL: \" + url + \"\\tCode:\" + response.status + \"\\t\" + response.statusText\r\n                  return null\r\n                }\r\n              }).then( arrayBuffer=>{\r\n                if(errorCount == 0 && arrayBuffer != null) {\r\n                  caches[cache_idx] = arrayBuffer\r\n                  that.progress_percentage = Math.floor(fulfilledCount/(origin_urls.length+1)*100);\r\n                }\r\n              })\r\n            } catch (error) {\r\n              errorCount ++;\r\n              // console.log(\"errorCount\",errorCount)\r\n\r\n              that.progress_status = \"exception\"\r\n              that.canvas_status_msg = error.message\r\n              that.msg_type = \"danger\"\r\n            } finally {\r\n              const index = executing.indexOf(url);\r\n              if (index !== -1) {\r\n                executing.splice(index, 1);\r\n              }\r\n            }\r\n\r\n            if (errorCount == 0 && urls.length > 0 && executing.length < maxNum) {\r\n              const runUrl = urls.shift();\r\n              run(runUrl);\r\n              executing.push(runUrl);\r\n            }\r\n            if (urls.length === 0 && executing.length === 0) resolve(fulfilledCount);\r\n          };\r\n\r\n          // 初始化时，执行最多 maxNum 个请求\r\n          for (let i = 0; i < Math.min(maxNum, urls.length); i++) {\r\n            const url = urls.shift();\r\n            run(url);\r\n            executing.push(url);\r\n          }\r\n        });\r\n      }\r\n\r\n      const batch_size = 10;\r\n      concurrencyRequest(urls, batch_size)\r\n        .then(fulfilledCount => {\r\n          if(fulfilledCount == origin_urls.length) {\r\n            that.loadData();\r\n          }\r\n        }).catch(error => {\r\n          console.error(\"err：\", error);\r\n        });\r\n\r\n    },\r\n    loadVolume(volume) {\r\n      this.progress_percentage = 100;\r\n\r\n      // console.log(volume)\r\n      // console.log(volume.data)\r\n      // console.log(\"I as called?!!!!!\")\r\n      static_data = new Float32Array(volume.data);\r\n      // lz = volume.zLength;\r\n      // ly = volume.yLength;\r\n      // lx = volume.xLength;\r\n      // console.log(\"dim\",lx,ly,lz)\r\n      // console.log(\"XYZ\",volume.xLength, volume.yLength, volume.zLength )\r\n      // let v = 0;\r\n      // for(let k = 0; k < data.length; k++) {\r\n      //   if (v < data[k]) {\r\n      //     v = data[k];\r\n      //   }\r\n      // }\r\n      // volume.data[0] = 1;\r\n\r\n      // console.log(\"max value:\", v)\r\n\r\n      // Texture to hold the volume. We have scalars, so we put our data in the red channel.\r\n      // THREEJS will select R32F (33326) based on the THREE.RedFormat and THREE.FloatType.\r\n      // Also see https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n      // TODO: look the dtype up in the volume metadata\r\n      texture = new THREE.Data3DTexture( volume.data, volume.xLength, volume.yLength, volume.zLength );\r\n      texture.format = THREE.RedFormat;\r\n      texture.type = THREE.FloatType;\r\n      texture.minFilter = texture.magFilter = THREE.LinearFilter;\r\n      texture.unpackAlignment = 1;\r\n      texture.needsUpdate = true;\r\n\r\n\r\n      texture_static = new THREE.Data3DTexture( volume.data, volume.xLength, volume.yLength, volume.zLength );\r\n      texture_static.format = THREE.RedFormat;\r\n      texture_static.type = THREE.FloatType;\r\n      texture_static.minFilter = texture_static.magFilter = THREE.LinearFilter;\r\n      texture_static.unpackAlignment = 1;\r\n      texture_static.needsUpdate = true;\r\n\r\n      // Material\r\n      const shader = VolumeRenderShader1;\r\n      \r\n\r\n      const uniforms = THREE.UniformsUtils.clone( shader.uniforms );\r\n\r\n      uniforms[ 'u_data' ].value = texture;\r\n      uniforms[ 'u_data_static' ].value = texture_static;\r\n      uniforms[ 'u_size' ].value.set( volume.xLength, volume.yLength, volume.zLength );\r\n      uniforms[ 'u_clim' ].value.set( volconfig.clim1, volconfig.clim2 );\r\n      uniforms[ 'u_renderstyle' ].value = 0; // 0: MIP, 1: ISO\r\n      uniforms[ 'u_renderthreshold' ].value = volconfig.isothreshold; // For ISO renderstyle\r\n      // uniforms[ 'u_cmdata' ].value = cmtextures[ volconfig.colormap ];\r\n      uniforms[ 'u_cmdata' ].value = cmtextures[ 'gray' ];\r\n      uniforms[ 'u_cmdata_green' ].value = cmtextures[ 'viridis' ];\r\n\r\n      material = new THREE.ShaderMaterial( {\r\n        uniforms: uniforms,\r\n        vertexShader: shader.vertexShader,\r\n        fragmentShader: shader.fragmentShader,\r\n        side: THREE.DoubleSide, // The volume shader uses the backface as its \"reference point\"\r\n        // transparent: true,  // 启用透明度\r\n        // opacity: 0.5         // 根据需要调整透明度\r\n\r\n      } );\r\n\r\n      // THREE.Mesh\r\n      const geometry = new THREE.BoxGeometry( volume.xLength, volume.yLength, volume.zLength );\r\n      geometry.translate( volume.xLength / 2 - 0.5, volume.yLength / 2 - 0.5, volume.zLength / 2 - 0.5 );\r\n\r\n      mesh = new THREE.Mesh( geometry, material );\r\n      // mesh.position.set(-30,-290,-230);\r\n      mesh.position.set(-volume.xLength/2,-volume.yLength/2,-volume.zLength/2);\r\n      group.add(mesh);\r\n      scene.add( group );\r\n      this.isComplete = true;\r\n      // group.rotation.y = rotate_range;\r\n      this.render();\r\n      setInterval(this.frameAnimate, 50, this)\r\n    },\r\n    updateUniforms() {\r\n\r\n      material.uniforms[ 'u_clim' ].value.set( volconfig.clim1, volconfig.clim2 );\r\n      // material.uniforms[ 'u_renderstyle' ].value = volconfig.renderstyle == 'mip' ? 0 : 1; // 0: MIP, 1: ISO\r\n      // material.uniforms[ 'u_renderthreshold' ].value = volconfig.isothreshold; // For ISO renderstyle\r\n      // material.uniforms[ 'u_cmdata' ].value = cmtextures[ volconfig.colormap ];\r\n\r\n      // this.render()\r\n\r\n    },\r\n    innerAnimate(){\r\n        // console.log(\"load frame:\",this.cur_frame-this.frame_start, caches[this.cur_frame-this.frame_start])\r\n        npy_loader.load(caches[this.cur_frame-this.frame_start], (array)=> {\r\n          // const startTime = performance.now(); \r\n          let arr_length = array.shape[0];\r\n          let data = new Float32Array(static_data);\r\n          for(let k =0; k< arr_length; k+=2) {\r\n            data[array.data[k]] += array.data[k+1]/1.0e6;\r\n          }\r\n          material.uniforms[ 'u_data' ].value.needsUpdate  = true;\r\n          material.uniforms[ 'u_data' ].value.image.data = data;\r\n          that.canvas_status_msg = \"current frame: \" + String(this.cur_frame);\r\n        })\r\n    },\r\n    frameAnimate() {\r\n      this.innerRotate();\r\n      if(control_config.animate) {\r\n        // console.log(canvas_status.msg)\r\n        this.cur_frame = this.cur_frame + 1;\r\n        if(this.cur_frame > this.frame_end) {\r\n          this.cur_frame = this.frame_start;\r\n        }\r\n        this.innerAnimate();\r\n      }\r\n    },\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n.big_canvas {\r\n  width: 100%;\r\n  background-color: black;\r\n}\r\n\r\n.slider {\r\n  position: absolute;\r\n  top: 90%;left: 10%;\r\n  width: 75%;\r\n  padding: 20px;\r\n  background-color: rgba(255, 255, 255, 0);\r\n}\r\n\r\n.percentage-progress {\r\n  position: absolute;\r\n  top: 50%;left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  padding: 20px;\r\n  background-color: rgba(255, 255, 255, 0);\r\n}\r\n\r\n.percentage-frame {\r\n  position: absolute;\r\n  top: 0%;left: 0%;\r\n  padding: 20px;\r\n  background-color: rgba(255, 255, 255, 0);\r\n}\r\n.percentage-value {\r\n  display: block;\r\n  margin-top: 10px;\r\n  font-size: 28px;\r\n}\r\n.percentage-label {\r\n  display: block;\r\n  margin-top: 10px;\r\n  font-size: 12px;\r\n}\r\n</style>\r\n","import {\r\n\tVector2,\r\n\tVector3\r\n} from 'three';\r\n\r\n/**\r\n * Shaders to render 3D volumes using raycasting.\r\n * The applied techniques are based on similar implementations in the Visvis and Vispy projects.\r\n * This is not the only approach, therefore it's marked 1.\r\n */\r\n\r\nconst VolumeRenderShader1 = {\r\n\r\n\tuniforms: {\r\n\t\t'u_size': { value: new Vector3( 1, 1, 1 ) },\r\n\t\t'u_renderstyle': { value: 0 },\r\n\t\t'u_renderthreshold': { value: 0.5 },\r\n\t\t'u_clim': { value: new Vector2( 1, 1 ) },\r\n\t\t'u_data': { value: null },\r\n\t\t'u_data_static': { value: null },\r\n\t\t'u_cmdata': { value: null },\r\n\t\t'u_cmdata_green': { value: null },\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\tvarying vec4 v_nearpos;\r\n\t\tvarying vec4 v_farpos;\r\n\t\tvarying vec3 v_position;\r\n\r\n\t\tvoid main() {\r\n\t\t\t\t// Prepare transforms to map to \"camera view\". See also:\r\n\t\t\t\t// https://threejs.org/docs/#api/renderers/webgl/WebGLProgram\r\n\t\t\t\tmat4 viewtransformf = modelViewMatrix;\r\n\t\t\t\tmat4 viewtransformi = inverse(modelViewMatrix);\r\n\r\n\t\t\t\t// Project local vertex coordinate to camera position. Then do a step\r\n\t\t\t\t// backward (in cam coords) to the near clipping plane, and project back. Do\r\n\t\t\t\t// the same for the far clipping plane. This gives us all the information we\r\n\t\t\t\t// need to calculate the ray and truncate it to the viewing cone.\r\n\t\t\t\tvec4 position4 = vec4(position, 1.0);\r\n\t\t\t\tvec4 pos_in_cam = viewtransformf * position4;\r\n\r\n\t\t\t\t// Intersection of ray and near clipping plane (z = -1 in clip coords)\r\n\t\t\t\tpos_in_cam.z = -pos_in_cam.w;\r\n\t\t\t\tv_nearpos = viewtransformi * pos_in_cam;\r\n\r\n\t\t\t\t// Intersection of ray and far clipping plane (z = +1 in clip coords)\r\n\t\t\t\tpos_in_cam.z = pos_in_cam.w;\r\n\t\t\t\tv_farpos = viewtransformi * pos_in_cam;\r\n\r\n\t\t\t\t// Set varyings and output pos\r\n\t\t\t\tv_position = position;\r\n\t\t\t\tgl_Position = projectionMatrix * viewMatrix * modelMatrix * position4;\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\r\n\t\t\t\tprecision highp float;\r\n\t\t\t\tprecision mediump sampler3D;\r\n\r\n\t\t\t\tuniform vec3 u_size;\r\n\t\t\t\tuniform int u_renderstyle;\r\n\t\t\t\tuniform float u_renderthreshold;\r\n\t\t\t\tuniform vec2 u_clim;\r\n\r\n\t\t\t\tuniform sampler3D u_data;\r\n\t\t\t\tuniform sampler3D u_data_static;\r\n\t\t\t\tuniform sampler2D u_cmdata;\r\n\t\t\t\tuniform sampler2D u_cmdata_green;\r\n\r\n\t\t\t\tvarying vec3 v_position;\r\n\t\t\t\tvarying vec4 v_nearpos;\r\n\t\t\t\tvarying vec4 v_farpos;\r\n\r\n\t\t\t\t// The maximum distance through our rendering volume is sqrt(3).\r\n\t\t\t\tconst int MAX_STEPS = 887;\t// 887 for 512^3, 1774 for 1024^3\r\n\t\t\t\tconst int REFINEMENT_STEPS = 4;\r\n\t\t\t\tconst float relative_step_size = 1.0;\r\n\t\t\t\tconst vec4 ambient_color = vec4(0.2, 0.4, 0.2, 1.0);\r\n\t\t\t\tconst vec4 diffuse_color = vec4(0.8, 0.2, 0.2, 1.0);\r\n\t\t\t\tconst vec4 specular_color = vec4(1.0, 1.0, 1.0, 1.0);\r\n\t\t\t\tconst float shininess = 40.0;\r\n\r\n\t\t\t\tvoid cast_mip(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray);\r\n\t\t\t\tvoid cast_iso(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray);\r\n\r\n\t\t\t\tfloat sample1(vec3 texcoords);\r\n\t\t\t\tfloat sample1_static(vec3 texcoords);\r\n\r\n\t\t\t\tvec4 apply_colormap(float val);\r\n\t\t\t\tvec4 apply_colormap_static(float val);\r\n\t\t\t\tvec4 add_lighting(float val, vec3 loc, vec3 step, vec3 view_ray);\r\n\r\n\r\n\t\t\t\tvoid main() {\r\n\t\t\t\t\t\t// Normalize clipping plane info\r\n\t\t\t\t\t\tvec3 farpos = v_farpos.xyz / v_farpos.w;\r\n\t\t\t\t\t\tvec3 nearpos = v_nearpos.xyz / v_nearpos.w;\r\n\r\n\t\t\t\t\t\t// Calculate unit vector pointing in the view direction through this fragment.\r\n\t\t\t\t\t\tvec3 view_ray = normalize(nearpos.xyz - farpos.xyz);\r\n\r\n\t\t\t\t\t\t// Compute the (negative) distance to the front surface or near clipping plane.\r\n\t\t\t\t\t\t// v_position is the back face of the cuboid, so the initial distance calculated in the dot\r\n\t\t\t\t\t\t// product below is the distance from near clip plane to the back of the cuboid\r\n\t\t\t\t\t\tfloat distance = dot(nearpos - v_position, view_ray);\r\n\t\t\t\t\t\tdistance = max(distance, min((-0.5 - v_position.x) / view_ray.x,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(u_size.x - 0.5 - v_position.x) / view_ray.x));\r\n\t\t\t\t\t\tdistance = max(distance, min((-0.5 - v_position.y) / view_ray.y,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(u_size.y - 0.5 - v_position.y) / view_ray.y));\r\n\t\t\t\t\t\tdistance = max(distance, min((-0.5 - v_position.z) / view_ray.z,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(u_size.z - 0.5 - v_position.z) / view_ray.z));\r\n\r\n\t\t\t\t\t\t// Now we have the starting position on the front surface\r\n\t\t\t\t\t\tvec3 front = v_position + view_ray * distance;\r\n\r\n\t\t\t\t\t\t// Decide how many steps to take\r\n\t\t\t\t\t\tint nsteps = int(-distance / relative_step_size + 0.5);\r\n\t\t\t\t\t\tif ( nsteps < 1 )\r\n\t\t\t\t\t\t\t\tdiscard;\r\n\r\n\t\t\t\t\t\t// Get starting location and step vector in texture coordinates\r\n\t\t\t\t\t\tvec3 step = ((v_position - front) / u_size) / float(nsteps);\r\n\t\t\t\t\t\tvec3 start_loc = front / u_size;\r\n\r\n\t\t\t\t\t\t// For testing: show the number of steps. This helps to establish\r\n\t\t\t\t\t\t// whether the rays are correctly oriented\r\n\t\t\t\t\t\t//'gl_FragColor = vec4(0.0, float(nsteps) / 1.0 / u_size.x, 1.0, 1.0);\r\n\t\t\t\t\t\t//'return;\r\n\r\n\t\t\t\t\t\tif (u_renderstyle == 0)\r\n\t\t\t\t\t\t\t\tcast_mip(start_loc, step, nsteps, view_ray);\r\n\t\t\t\t\t\telse if (u_renderstyle == 1)\r\n\t\t\t\t\t\t\t\tcast_iso(start_loc, step, nsteps, view_ray);\r\n\r\n\t\t\t\t\t\tif (gl_FragColor.a < 0.05)\r\n\t\t\t\t\t\t\t\tdiscard;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tfloat sample1(vec3 texcoords) {\r\n\t\t\t\t\t\t/* Sample float value from a 3D texture. Assumes intensity data. */\r\n\t\t\t\t\t\treturn texture(u_data, texcoords.xyz).r;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfloat sample1_static(vec3 texcoords) {\r\n\t\t\t\t\treturn texture(u_data_static, texcoords.xyz).r;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvec4 apply_colormap(float val) {\r\n\t\t\t\t\t\tval = (val - u_clim[0]) / (u_clim[1] - u_clim[0]);\r\n\r\n\t\t\t\t\t\treturn texture2D(u_cmdata_green, vec2(val, 0.5));\r\n\t\t\t\t\t\t// return texture2D(u_cmdata, vec2(val, 0.5));\r\n\t\t\t\t}\r\n\t\t\t\tvec4 apply_colormap_static(float val, float val_static) {\r\n\t\t\t\t\tif(val > val_static) {\r\n\t\t\t\t\t\t// val = val - val_static; // the effert is bad, so remove this line, although it is the right fluo density!\r\n\t\t\t\t\t\tval = (val - u_clim[0]) / (u_clim[1] - u_clim[0]);\r\n\t\t\t\t\t\treturn texture2D(u_cmdata_green, vec2(val, 0.5));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tval = (val - u_clim[0]) / (u_clim[1] - u_clim[0]);\r\n\t\t\t\t\t\treturn texture2D(u_cmdata, vec2(val, 0.5));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvoid cast_mip(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray) {\r\n\r\n\t\t\t\t\t\tfloat max_val = -1e6;\r\n\t\t\t\t\t\tfloat max_val_static = -1e6;\r\n\t\t\t\t\t\tint max_i = 100;\r\n\t\t\t\t\t\tvec3 loc = start_loc;\r\n\r\n\t\t\t\t\t\t// Enter the raycasting loop. In WebGL 1 the loop index cannot be compared with\r\n\t\t\t\t\t\t// non-constant expression. So we use a hard-coded max, and an additional condition\r\n\t\t\t\t\t\t// inside the loop.\r\n\t\t\t\t\t\tfor (int iter=0; iter<MAX_STEPS; iter++) {\r\n\t\t\t\t\t\t\t\tif (iter >= nsteps)\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t// Sample from the 3D texture\r\n\t\t\t\t\t\t\t\tfloat val = sample1(loc);\r\n\t\t\t\t\t\t\t\tfloat val_static = sample1_static(loc);\r\n\t\t\t\t\t\t\t\t// Apply MIP operation\r\n\t\t\t\t\t\t\t\tif (val > max_val) {\r\n\t\t\t\t\t\t\t\t\t\tmax_val = val;\r\n\t\t\t\t\t\t\t\t\t\tmax_i = iter;\r\n\t\t\t\t\t\t\t\t\t\tmax_val_static = val_static;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// Advance location deeper into the volume\r\n\t\t\t\t\t\t\t\tloc += step;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Refine location, gives crispier images\r\n\t\t\t\t\t\tvec3 iloc = start_loc + step * (float(max_i) - 0.5);\r\n\t\t\t\t\t\tvec3 istep = step / float(REFINEMENT_STEPS);\r\n\t\t\t\t\t\tfor (int i=0; i<REFINEMENT_STEPS; i++) {\r\n\t\t\t\t\t\t\t\tmax_val = max(max_val, sample1(iloc));\r\n\t\t\t\t\t\t\t\tmax_val_static = max(max_val_static, sample1_static(iloc));\r\n\t\t\t\t\t\t\t\tiloc += istep;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Resolve final color\r\n\t\t\t\t\t\tgl_FragColor = apply_colormap_static(max_val, max_val_static);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tvoid cast_iso(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray) {\r\n\r\n\t\t\t\t\t\tgl_FragColor = vec4(0.0);\t// init transparent\r\n\t\t\t\t\t\tvec4 color3 = vec4(0.0);\t// final color\r\n\t\t\t\t\t\tvec3 dstep = 1.5 / u_size;\t// step to sample derivative\r\n\t\t\t\t\t\tvec3 loc = start_loc;\r\n\r\n\t\t\t\t\t\tfloat low_threshold = u_renderthreshold - 0.02 * (u_clim[1] - u_clim[0]);\r\n\r\n\t\t\t\t\t\t// Enter the raycasting loop. In WebGL 1 the loop index cannot be compared with\r\n\t\t\t\t\t\t// non-constant expression. So we use a hard-coded max, and an additional condition\r\n\t\t\t\t\t\t// inside the loop.\r\n\t\t\t\t\t\tfor (int iter=0; iter<MAX_STEPS; iter++) {\r\n\t\t\t\t\t\t\t\tif (iter >= nsteps)\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\t// Sample from the 3D texture\r\n\t\t\t\t\t\t\t\tfloat val = sample1(loc);\r\n\r\n\t\t\t\t\t\t\t\tif (val > low_threshold) {\r\n\t\t\t\t\t\t\t\t\t\t// Take the last interval in smaller steps\r\n\t\t\t\t\t\t\t\t\t\tvec3 iloc = loc - 0.5 * step;\r\n\t\t\t\t\t\t\t\t\t\tvec3 istep = step / float(REFINEMENT_STEPS);\r\n\t\t\t\t\t\t\t\t\t\tfor (int i=0; i<REFINEMENT_STEPS; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tval = sample1(iloc);\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (val > u_renderthreshold) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tgl_FragColor = add_lighting(val, iloc, dstep, view_ray);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\tiloc += istep;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// Advance location deeper into the volume\r\n\t\t\t\t\t\t\t\tloc += step;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tvec4 add_lighting(float val, vec3 loc, vec3 step, vec3 view_ray)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Calculate color by incorporating lighting\r\n\r\n\t\t\t\t\t\t// View direction\r\n\t\t\t\t\t\tvec3 V = normalize(view_ray);\r\n\r\n\t\t\t\t\t\t// calculate normal vector from gradient\r\n\t\t\t\t\t\tvec3 N;\r\n\t\t\t\t\t\tfloat val1, val2;\r\n\t\t\t\t\t\tval1 = sample1(loc + vec3(-step[0], 0.0, 0.0));\r\n\t\t\t\t\t\tval2 = sample1(loc + vec3(+step[0], 0.0, 0.0));\r\n\t\t\t\t\t\tN[0] = val1 - val2;\r\n\t\t\t\t\t\tval = max(max(val1, val2), val);\r\n\t\t\t\t\t\tval1 = sample1(loc + vec3(0.0, -step[1], 0.0));\r\n\t\t\t\t\t\tval2 = sample1(loc + vec3(0.0, +step[1], 0.0));\r\n\t\t\t\t\t\tN[1] = val1 - val2;\r\n\t\t\t\t\t\tval = max(max(val1, val2), val);\r\n\t\t\t\t\t\tval1 = sample1(loc + vec3(0.0, 0.0, -step[2]));\r\n\t\t\t\t\t\tval2 = sample1(loc + vec3(0.0, 0.0, +step[2]));\r\n\t\t\t\t\t\tN[2] = val1 - val2;\r\n\t\t\t\t\t\tval = max(max(val1, val2), val);\r\n\r\n\t\t\t\t\t\tfloat gm = length(N); // gradient magnitude\r\n\t\t\t\t\t\tN = normalize(N);\r\n\r\n\t\t\t\t\t\t// Flip normal so it points towards viewer\r\n\t\t\t\t\t\tfloat Nselect = float(dot(N, V) > 0.0);\r\n\t\t\t\t\t\tN = (2.0 * Nselect - 1.0) * N;\t// ==\tNselect * N - (1.0-Nselect)*N;\r\n\r\n\t\t\t\t\t\t// Init colors\r\n\t\t\t\t\t\tvec4 ambient_color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\t\t\t\t\t\tvec4 diffuse_color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\t\t\t\t\t\tvec4 specular_color = vec4(0.0, 0.0, 0.0, 0.0);\r\n\r\n\t\t\t\t\t\t// note: could allow multiple lights\r\n\t\t\t\t\t\tfor (int i=0; i<1; i++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t // Get light direction (make sure to prevent zero devision)\r\n\t\t\t\t\t\t\t\tvec3 L = normalize(view_ray);\t//lightDirs[i];\r\n\t\t\t\t\t\t\t\tfloat lightEnabled = float( length(L) > 0.0 );\r\n\t\t\t\t\t\t\t\tL = normalize(L + (1.0 - lightEnabled));\r\n\r\n\t\t\t\t\t\t\t\t// Calculate lighting properties\r\n\t\t\t\t\t\t\t\tfloat lambertTerm = clamp(dot(N, L), 0.0, 1.0);\r\n\t\t\t\t\t\t\t\tvec3 H = normalize(L+V); // Halfway vector\r\n\t\t\t\t\t\t\t\tfloat specularTerm = pow(max(dot(H, N), 0.0), shininess);\r\n\r\n\t\t\t\t\t\t\t\t// Calculate mask\r\n\t\t\t\t\t\t\t\tfloat mask1 = lightEnabled;\r\n\r\n\t\t\t\t\t\t\t\t// Calculate colors\r\n\t\t\t\t\t\t\t\tambient_color +=\tmask1 * ambient_color;\t// * gl_LightSource[i].ambient;\r\n\t\t\t\t\t\t\t\tdiffuse_color +=\tmask1 * lambertTerm;\r\n\t\t\t\t\t\t\t\tspecular_color += mask1 * specularTerm * specular_color;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Calculate final color by componing different components\r\n\t\t\t\t\t\tvec4 final_color;\r\n\t\t\t\t\t\tvec4 color = apply_colormap(val);\r\n\t\t\t\t\t\tfinal_color = color * (ambient_color + diffuse_color) + specular_color;\r\n\t\t\t\t\t\tfinal_color.a = color.a;\r\n\t\t\t\t\t\treturn final_color;\r\n\t\t\t\t}`\r\n\r\n};\r\n\r\nexport { VolumeRenderShader1 };\r\n","import { render } from \"./AstroCanvas.vue?vue&type=template&id=6a196785&scoped=true\"\nimport script from \"./AstroCanvas.vue?vue&type=script&lang=js\"\nexport * from \"./AstroCanvas.vue?vue&type=script&lang=js\"\n\nimport \"./AstroCanvas.vue?vue&type=style&index=0&id=6a196785&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-6a196785\"]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=47bb6873\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=47bb6873&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { createApp } from 'vue'\nimport App from './App.vue'\nimport ElementPlus from 'element-plus'\nimport 'element-plus/dist/index.css'\n\n\ncreateApp(App).use(ElementPlus).mount('#app')\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkastro_dynamics\"] = self[\"webpackChunkastro_dynamics\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(1682); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createBlock","_component_AstroCanvas","class","_createElementVNode","_createElementBlock","_hoisted_1","id","onClick","_cache","args","_ctx","clickCanvas","_createVNode","_component_el_progress","type","style","_normalizeStyle","$data","isComplete","percentage","progress_percentage","status","progress_status","default","_withCtx","_hoisted_2","_toDisplayString","_hoisted_3","_","_component_el_text","msg_type","size","_createTextVNode","canvas_status_msg","_component_el_slider","modelValue","cur_frame","$event","min","frame_start","max","frame_end","onChange","$options","sliderChange","VolumeRenderShader1","uniforms","value","Vector3","Vector2","vertexShader","fragmentShader","scene","THREE","renderer","camera","controls","material","texture","texture_static","loader","mesh","group","cmtextures","volconfig","static_data","npy_loader","npyjs","rotate_range","Math","PI","dynamics_config","rotate_direction","fulfilledCount","errorCount","that","control_config","animate","rotate","caches","name","data","mounted","this","init","readIni","methods","h","aspect","window","innerWidth","innerHeight","position","set","canvas","document","querySelector","setPixelRatio","setSize","OrbitControls","domElement","minZoom","maxZoom","zoom","updateProjectionMatrix","enablePan","update","addEventListener","onWindowResize","innerAnimate","fetch","then","response","text","all_config","parse","active","parseInt","Array","preloadData","drawAxis","axesHelper","add","innerRotate","rotation","y","render","requestAnimationFrame","frustumHeight","top","bottom","left","right","drawCenterCube","geometry","color","side","cube","loadData","viridis","load","gray","green","mix","clim1","clim2","renderstyle","isothreshold","colormap","frame","NRRDLoader","nrrd_file","loadVolume","gui","GUI","updateAnimate","updateRotate","updateUniforms","ani","rot","urls","k","filename","frame_prefix","String","padStart","push","origin_urls","async","concurrencyRequest","maxNum","Promise","resolve","executing","run","cache_idx","indexOf","url","ok","arrayBuffer","statusText","floor","length","error","message","index","splice","runUrl","shift","i","batch_size","catch","console","volume","Float32Array","xLength","yLength","zLength","format","minFilter","magFilter","unpackAlignment","needsUpdate","shader","clone","translate","setInterval","frameAnimate","array","arr_length","shape","image","__exports__","components","AstroCanvas","createApp","App","use","ElementPlus","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","Object","keys","every","key","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","Function","e","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}